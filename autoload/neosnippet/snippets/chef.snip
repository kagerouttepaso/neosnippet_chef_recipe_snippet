include ruby.snip

snippet  directory
abbr     create directory
  directory "${1:target}" do
    owner "${2:owner}"
    group "${3:group}"
    mode 00755
    action :create
  end
  ${0}

snippet  directory_del
abbr     delete directory
  directory "${1:target}" do
    recursive true
    action :delete
  end
  ${0}

snippet  easy_install_package
abbr     install python package
  easy_install_package ${1} do
    action :install
  end
  ${0}

snippet gem_package
abbr    install gem package
  gem_package package_name do
    action :install
  end
  ${0}

snippet  apt_package
abbr     install apt package
  apt_package ${1} do
    action :install
  end
  ${0}

snippet execute
abbr    execute command
  execute "${1:command}" do
    action :run
  end
  ${0}

snippet  file_del
abbr     delete file
  file "${1:target}" do
    action :delete
  end
  ${0}

snippet  file_mode
abbr     set file permission
  file "${1:target}" do
    mode 00644
  end
  ${0}

snippet  link
abbr     create link
  link "${1:source}" do
    to "${2:destination}"
  end
  ${0}

snippet  link_del
abbr     delete link
  link "${1:target}" do
    action :delete
  end
  ${0}

snippet package
abbr    install single package
  package "${1}" do
    action :install
  end
  ${0}

snippet package_version
abbr    install package with version
  package "${1:package_name}" do
    action :install
    version "${2}"
  end
  ${0}

snippet package_from_file
abbr    install package from file
  package "${1:package_name}" do
    action :install
    source "${2:source}"
  end
  ${0}

snippet package_each
abbr    install some packages
  %w{${1} ${2}}.each do |package_name|
    package package_name do
      action :install
    end
  end
  ${0}

snippet package_remove
abbr    remove package
  package "${1:package_name}" do
    action :remove
  end
  ${0}

snippet  remote_file
abbr     get remote file
  remote_file "#{Chef::Config[:file_cache_path]}/${1}" do
    source "${2}"
    mode ${3}
    checksum ${4}
  end
  ${0}

snippet cache_path
abbr    cache path
  #{Chef::Config[:file_cache_path]}

snippet route_add
abbr    add routing
  route "${1:ip/mask}" do
    gateway "${2:ip}"
    device "${3:ethN}"
  end
  ${0}

snippet route_del
abbr    delete route
  route "${1:ip/mask}" do
    gateway "${2:ip}"
    action :delete
  end 
  ${0}

snippet  service
abbr     service
  service "${1:service_name}" do
    supports :status => true, :restart => true, :reload => true
    action [ :enable, :start ]
  end 
  ${0}

snippet  service_restart
abbr     restart service
  service "${1:service_name}" do
    action :restart
  end 
  ${0}

snippet  service_disabled
abbr     disable service
  service "${1:service_name}" do
    action [ :stop, :disable ]
  end 
  ${0}

snippet  script
abbr     script
  script "${1}" do
    interpreter "bash"
    user "root"
    cwd 
    code <<-EOH
      ${2}
    EOH
  end
  ${0}

snippet  template
abbr     template
  template "${1}" do
    source "${2}"
    owner "${3}"
    group "${4}"
    mode "${5}"
  end
  ${0}

snippet cron
abbr    cron
  cron "${1}" do
    minute "${2}"
    hour "${3}"
    day "${4}"
    month "${5}"
    weekday "${6}"
    action :create
  end
  ${0}

snippet incl
abbr    include_recipe
  include_recipe "${1}"

snippet dep
abbr    depends
  depends "${1}"

snippet mit
abbr    MIT License 
  # This software is released under the MIT License.
  # http://opensource.org/licenses/mit-license.php
  ${0}

snippet ft
abbr    filetype 
  # vim: filetype=ruby.chef
  ${0}

snippet notif
abbr    notifies
  notifies :${1}, "service[${2}]"

snippet subs
abbr    subsribes
  subscribes :${1}, resources("${2}")

snippet case_platform
abbr    case_platform
  case node["platform"]
  when "centos", "redhat", "amazon", "scientific", "fedora"
    ${0}
  end
 
snippet log
abbr    log
  Chef::Log.info('${1}')
  ${0}

snippet yum_repo
abbr    yum_repository
  yum_repository "${1}" do
    description "${2}"
    url "${3}"
    gpgkey "${4}"
    action :create
  end
  ${0}

snippet apt_repo
abbr    apt_repository
  apt_repository "jenkins" do
    uri "${1}"
    key "${2}"
    components ["${3}/"]
    action :add
    notifies :run, "execute[apt-get update]", :immediately
  end
  ${0}

snippet not_exist
abbr    not_exist
  not_if { ::File.exists?("${1}") }

snippet only_exist
abbr    only_exist
  only_if { ::File.exists?("${1}") }

snippet cookbook_file
abbr    cookbook_file
  cookbook_file "${1:fullname}" do
    source "${2:source}"
    mode ${3:mode} 
  end
  ${0}

snippet git
abbr    git
  git "${1:directory}" do 
    repository "${2:repository_url}"
    reference "master" 
    action :sync 
  end
  ${0}

snippet group 
abbr    add group 
  group '${1}' do
    group_name '${2}'
    gid        ${3}
    action     :create
  end
  ${0}

snippet group_del
abbr    delete group 
  group '${1}' do
    group_name '${2}'
    action     :delete
  end
  ${0}

snippet user
abbr    add user
  user "${1:user}" do
    gid ${2:gid}
    uid ${3:uid}
    home "${4:home}"
    shell "${5:shell}"
    password "${6:password}"
    supports :manage_home => true
    action   [:create, :manage]
  end
  ${0}

snippet http_request
abbr    send http request
  http_request "${1:name}" do
    url "${2:url}"
    action :get
  end
  ${0}
